const fs = require('fs');
const path = require('path');
const MiniCssExtractPlugin = require('mini-css-extract-plugin');
const HtmlWebpackPlugin = require('html-webpack-plugin');

class CustomAfterEmitPlugin {
  apply(compiler) {
    compiler.hooks.afterEmit.tap('CustomAfterEmitPlugin', (compilation) => {
      const outputPath = compiler.options.output.path;
      const statusFilePath = path.resolve(outputPath, '.DO_NOT_MODIFY_THIS_FOLDER');

      fs.writeFileSync(statusFilePath, 'Auto generated by webpack. DO NOT MODIFY THIS FOLDER.', 'utf-8');
    });
  }
}

module.exports = {
  // mode: 'production',
  mode: 'development',
  devtool: false,
  resolve: { fallback: { "util": false } },
  entry: {
    'editor': './src/coffee/editor.coffee',

    "editorComponents": './src/js/editorComponents.js',

    // 'register': './src/less/register.less', // 唯独此 less 文件没被任何 js 引用

    'base': './src/js/base.js',
    'about': './src/js/about.js',
    // 'dbManage': './src/js/dbManage.js',
    // 'index': './src/js/index.js',
    // 'leftFuncBtn': './src/js/leftFuncBtn.js',
    // 'my': './src/js/my.js',
    // 'siteManage': './src/js/siteManage.js',
    // 'toolbox': './src/js/toolbox.js',
    // 'task.log': './src/js/task/log.js',
    // 'task.multi': './src/js/task/multi.js',
    // 'task.new': './src/js/task/new.js',
    // 'task.setGroup': './src/js/task/setGroup.js',
    // 'task.setTime': './src/js/task/setTime.js',
    // 'task.totalLog': './src/js/task/totalLog.js',
    // 'tpl.register': './src/js/tpl/register.js',
    // 'tpl.setGroup': './src/js/tpl/setGroup.js',
    // 'tpl.subscribe': './src/js/tpl/subscribe.js',
    // 'tpl.subscribeAdmin': './src/js/tpl/subscribeAdmin.js',
    // 'tpl.unsubscribe': './src/js/tpl/unsubscribe.js',
    // 'tpl.unsubscribeCurrent': './src/js/tpl/unsubscribeCurrent.js',
    // 'tpl.wait': './src/js/tpl/wait.js',
    // 'user.manage': './src/js/user/manage.js',
    // 'user.registerCusPusher': './src/js/user/registerCusPusher.js',
    // 'user.registerPusher': './src/js/user/registerPusher.js',
    // 'user.registerPushsw': './src/js/user/registerPushsw.js',
    // 'user.setPassword': './src/js/user/setPassword.js',

    // 'editablelist': './src/html/editablelist.html',
  },
  output: {
    path: path.resolve(__dirname, 'dist/static'),
    filename: '[name].js',
    // publicPath: 'static',
    clean: true,
    library: {
      // name: 'MyLibrary',
      type: 'window',
    },
  },
  optimization: {
    minimize: false, // 不知道为什么，开了 minimize 后，angular.bootstrap 会报错
    splitChunks: {
      chunks: 'all',
    },
  },
  module: {
    rules: [
      {
        test: /\.coffee$/,
        use: 'coffee-loader'
      },
      {
        test: /\.less$/,
        use: [
          MiniCssExtractPlugin.loader, // 提取css到单独文件
          // 'style-loader',
          'css-loader',
          'less-loader'
        ]
      },
      {
        test: /\.css$/,
        use: [
          MiniCssExtractPlugin.loader,
          // 'style-loader',
          'css-loader',
        ]
      },
      {
        test: /\.(png|ttf|eot|woff2|jpg|svg)$/i,
        type: 'asset/resource',
      },
      {
        test: /editablelist\.html$/i,
        type: 'asset/resource',
      },
    ]
  },
  plugins: [
    new CustomAfterEmitPlugin(),
    new MiniCssExtractPlugin(),
    new HtmlWebpackPlugin({
      filename: '../template/base.html',
      template: './src/html/base.html',
      chunks: ['base',],
      publicPath: 'static',
      // inject: false
    }),
    new HtmlWebpackPlugin({
      filename: '../template/about.html',
      template: './src/html/about.html',
      chunks: ['about',],
      publicPath: 'static',
    }),
  ]
};